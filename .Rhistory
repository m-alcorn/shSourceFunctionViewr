df <- data.frame(A=iName,
B=fList$Name[j],
A.Full.Name=iFullName,
B.Full.Name=fList$FullName[j],
Type=iType,
Count=jCount)
} else {
idf <- data.frame(A=iName,
B=fList$Name[j],
A.Full.Name=iFullName,
B.Full.Name=fList$FullName[j],
Type=iType,
Count=jCount)
df <- rbind(df,idf)
}
n <- n + 1
} #End Test for autoselect
} # End test of iName in jValue
} # End inner search loop (j)
} # End Search Function (i)
return(df)
} else {
return(FALSE)
}
}
data <- readFunctionCSV()
data <- readFunctionCSV()
i <- 1
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iDepth <- length(iDir[[1]])
df <- data.frame(fullPath="",pathDepth=1)
View(df)
getFolderPaths <- function(data) {
df <- data.frame(fullPath="",pathDepth=1)
for(i in 1:nrow(data)){
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x=1){
getFolderPaths <- function(data) {
df <- data.frame(fullPath="",pathDepth=1)
for(i in 1:nrow(data)){
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
#populate data.frame
df$fullPath[i] <- ip
df$pathDepth[i] <- iDepth
}
return(df)
}
dfPaths <- getFolderPaths(data)
View(data)
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iDepth <- length(iDir[[1]])
iDepth > 1
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
iDir[[1]][1]
getFolderPaths <- function(data) {
df <- data.frame(fullPath="",pathDepth=1)
for(i in 1:nrow(data)){
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,pathDepth=iDepth))
}
}
return(df)
}
dfPaths <- getFolderPaths(data)
View(dfPaths)
fps <- unique(data$A.Full.Name)
View(data)
readFunctionCSV <- function(f = "FunctionsList.csv"){
if(file.exists(f)){
fList <- read_csv(f)
for(i in 1:length(fList$Name)){
# If first run, start a new data frame to store the output
if(i==1){
n <- 0
}
# Get the ith values to test
iName <- fList$Name[i]
iFullName <- fList$FullName[i]
iType <- fList$Type[i]
# Now loop through all the values in the text to find where there is a match
for(j in 1: length(fList$Value)){
if(j==1){ jCount <- 1}
jText <- fList$Value[j]
jTextSplit <- strsplit(jText,"[*+,()\n////\r ]+")
#Check if your value exists in the Value column
if(iName %in% jTextSplit[[1]]){
jCount <- jCount + 1
#Dont include if referenced in its own row
if(!i==j){
#Add these values to the dataframe
# If first run, start a new data frame to store the output
if(n==0){
df <- data.frame(A=iName,
B=fList$Name[j],
A.Full.Name=iFullName,
B.Full.Name=fList$FullName[j],
Type=iType,
Count=jCount)
} else {
idf <- data.frame(A=iName,
B=fList$Name[j],
A.Full.Name=iFullName,
B.Full.Name=fList$FullName[j],
Type=iType,
Count=jCount)
df <- rbind(df,idf)
}
n <- n + 1
} #End Test for autoselect
} # End test of iName in jValue
} # End inner search loop (j)
} # End Search Function (i)
return(df)
} else {
return(FALSE)
}
}
data <- readFunctionCSV()
getFolderPaths <- function(data) {
# fps <- unique(data$A.Full.Name)
df <- data.frame(fullPath="",pathDepth=1)
for(i in 1:nrow(data)){
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,pathDepth=iDepth))
}
}
return(df)
}
dfPaths <- getFolderPaths(data)
View(dfPaths)
getFolderPaths <- function(data) {
# fps <- unique(data$A.Full.Name)
df <- data.frame(fullPath="",pathDepth=1)
for(i in 1:nrow(data)){
iDir <- strsplit(data$A.Full.Name[i],"[//.]+")
iFunctionShortName <- iDir[[1]][length(iDir)]
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,functionName=iFunctionShortName, pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,functionName=iFunctionShortName,pathDepth=iDepth))
}
}
return(df)
}
dfPaths <- getFolderPaths(data)
View(dfPaths)
data$A.Full.Name
unique(data$A.Full.Name)
a <- c(data$A.Full.Name,data$B.Full.Name)
a_unique <- unique(a)
length(a_unique)
i <- 1
iDir <- strsplit(a_unique[i],"[//.]+")
iFunctionShortName <- iDir[[1]][length(iDir)]
iDir
iFunctionShortName
length(iDir)
length(iDir[[1]])
iFunctionShortName <- iDir[[1]][length(iDir[[1]])]
iFunctionShortName
iDepth <- length(iDir[[1]])
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
iFunctionShortName <- paste0("$",iDir[[1]][length(iDir[[1]])])
if(i==1){
df <- data.frame(fullPath=ip,functionName=iFunctionShortName, pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,functionName=iFunctionShortName,pathDepth=iDepth))
}
View(df)
getFolderPaths <- function(data) {
# fps <- unique(data$A.Full.Name)
a <- c(data$A.Full.Name,data$B.Full.Name)
a_unique <- unique(a)
for(i in 1:length(a_unique)){
iDir <- strsplit(a_unique[i],"[//.]+")
iFunctionShortName <- paste0("$",iDir[[1]][length(iDir[[1]])])
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,functionName=iFunctionShortName, pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,functionName=iFunctionShortName,pathDepth=iDepth))
}
}
return(df)
}
dfPaths <- getFolderPaths(data)
View(dfPaths)
View(data)
df %>%
# filter(BaseFolder=="$ACT_Net_Take") %>%
simpleNetwork(height="400px", width="400px",
Source = 1,                 # column number of source
Target = 4,                 # column number of target
linkDistance = 80,          # distance between node. Increase this value to have more space between nodes
charge = -100,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 10,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#46b99c",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#ff0080",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.8,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T# Can you zoom on the figure?
) %>%
saveWidget("E:/Source/R/rACTVeneer/data/UMB_ACT_Functions_network.html")
View(data)
df %>%
# filter(BaseFolder=="$ACT_Net_Take") %>%
simpleNetwork(height="400px", width="400px",
Source = 3,                 # column number of source
Target = 4,                 # column number of target
linkDistance = 80,          # distance between node. Increase this value to have more space between nodes
charge = -100,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 10,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#46b99c",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#ff0080",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.8,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T# Can you zoom on the figure?
)
df <- data
df %>%
# filter(BaseFolder=="$ACT_Net_Take") %>%
simpleNetwork(height="400px", width="400px",
Source = 3,                 # column number of source
Target = 4,                 # column number of target
linkDistance = 80,          # distance between node. Increase this value to have more space between nodes
charge = -100,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 10,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#46b99c",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#ff0080",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.8,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T# Can you zoom on the figure?
) %>%
saveWidget("E:/Source/R/rACTVeneer/data/UMB_ACT_Functions_network.html")
library(SWTools)
baseURL="http://localhost:9876"
baseURL="http://localhost:9876"
liveF <-jsonlite::fromJSON(paste0(baseURL,"/functions"))
View(liveF)
tail(liveF)
View(liveF)
ulf <- unique(liveF$Name)
paste0(baseURL,"/functions")
remove(liveF)
readFunctionCSV <- function(f = "FunctionsList.csv"){
if(file.exists(f)){
fList <- read_csv(f)
for(i in 1:length(fList$Name)){
# If first run, start a new data frame to store the output
if(i==1){
n <- 0
}
# Get the ith values to test
iName <- fList$Name[i]
iFullName <- fList$FullName[i]
iType <- fList$Type[i]
# Now loop through all the values in the text to find where there is a match
for(j in 1: length(fList$Value)){
if(j==1){ jCount <- 1}
jText <- fList$Value[j]
jTextSplit <- strsplit(jText,"[*+,()\n////\r ]+")
#Check if your value exists in the Value column
if(iName %in% jTextSplit[[1]]){
jCount <- jCount + 1
#Dont include if referenced in its own row
if(!i==j){
#Add these values to the dataframe
# If first run, start a new data frame to store the output
if(n==0){
df <- data.frame(A=iName,
B=fList$Name[j],
A.Full.Name=iFullName,
B.Full.Name=fList$FullName[j],
Type=iType,
Count=jCount)
} else {
idf <- data.frame(A=iName,
B=fList$Name[j],
A.Full.Name=iFullName,
B.Full.Name=fList$FullName[j],
Type=iType,
Count=jCount)
df <- rbind(df,idf)
}
n <- n + 1
} #End Test for autoselect
} # End test of iName in jValue
} # End inner search loop (j)
} # End Search Function (i)
return(df)
} else {
return(FALSE)
}
}
data <- readFunctionCSV()
View(data)
unique(data$A.Full.Name)
# fps <- unique(data$A.Full.Name)
a <- c(data$A.Full.Name,data$B.Full.Name)
a_unique <- unique(a)
getFolderPaths <- function(data) {
# fps <- unique(data$A.Full.Name)
a <- c(data$A.Full.Name,data$B.Full.Name)
a_unique <- unique(a)
for(i in 1:length(a_unique)){
iDir <- strsplit(a_unique[i],"[//.]+")
iFunctionShortName <- paste0("$",iDir[[1]][length(iDir[[1]])])
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,functionName=iFunctionShortName, pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,functionName=iFunctionShortName,pathDepth=iDepth))
}
}
return(df)
}
dfPaths <- getFolderPaths(data)
View(dfPaths)
numPaths <- unique(dfPaths$fullPath)
library(bslib)
shiny::runApp()
runApp()
runApp()
runApp()
source("networkFunctions.R")
data %>%
# filter(BaseFolder=="$ACT_Net_Take") %>%
simpleNetwork(height="400px", width="400px",
Source = 3,                 # column number of source
Target = 4,                 # column number of target
linkDistance = 80,          # distance between node. Increase this value to have more space between nodes
charge = -100,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 10,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#46b99c",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#ff0080",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.8,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T# Can you zoom on the figure?
)
p <-   data %>%
# filter(BaseFolder=="$ACT_Net_Take") %>%
simpleNetwork(height="400px", width="400px",
Source = 3,                 # column number of source
Target = 4,                 # column number of target
linkDistance = 80,          # distance between node. Increase this value to have more space between nodes
charge = -100,                # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value)
fontSize = 10,               # size of the node names
fontFamily = "serif",       # font og node names
linkColour = "#46b99c",        # colour of edges, MUST be a common colour for the whole graph
nodeColour = "#ff0080",     # colour of nodes, MUST be a common colour for the whole graph
opacity = 0.8,              # opacity of nodes. 0=transparent. 1=no transparency
zoom = T# Can you zoom on the figure?
)
source("networkFunctions.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(data$A.Full.Name,data$B.Full.Name)
a_unique <- unique(a)
for(i in 1:length(a_unique)){
iDir <- strsplit(a_unique[i],"[//.]+")
iFunctionShortName <- paste0("$",iDir[[1]][length(iDir[[1]])])
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,functionName=iFunctionShortName, pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,functionName=iFunctionShortName,pathDepth=iDepth))
}
sc
}
a <- c(data$A.Full.Name,data$B.Full.Name)
a_unique <- unique(a)
for(i in 1:length(a_unique)){
iDir <- strsplit(a_unique[i],"[//.]+")
iFunctionShortName <- paste0("$",iDir[[1]][length(iDir[[1]])])
iDepth <- length(iDir[[1]])
#recreate path without function base name
if (iDepth > 1) {
for(x in 1: (iDepth-1)){
if(x==1){
ip <- iDir[[1]][1]
} else {
ip <- paste0(ip,".",iDir[[1]][x])
}
}
} else {
ip <- iDir[[1]][1]
}
if(i==1){
df <- data.frame(fullPath=ip,functionName=iFunctionShortName, pathDepth=iDepth)
} else {
df <- rbind(df,data.frame(fullPath=ip,functionName=iFunctionShortName,pathDepth=iDepth))
}
}
View(df)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
